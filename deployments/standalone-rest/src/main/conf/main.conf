# This section (unlabeled) provides the core configuration that Cartographer needs
# to function properly.

#data.dir=${carto.home}/var/lib/cartographer/data
#cache.dir=${carto.home}/var/lib/cartographer/cache
#work.dir=${carto.home}/var/lib/cartographer/work

# By default, include anything required for a build of root GAVs for the 
# specified graph (from the recipe).
#
# Another popular option here is 'runtime', which includes only things the
# root GAVs require in order to run. Recipes can override this value.
#
#default.webfilter.preset=build-requires


# If you wish, you can include configurations from a directory of files using:
#Include conf.d/*.conf

# Or, you can just inline the configurations below:

[aliases]
# This configures the list of remote sources for POM information used to build
# the dependency graphs that are at the heart of Cartographer.
# Cartographer recipes use source locations, which are usually easiest to specify
# as aliases. There are two ways we can provide these:
#
# * free-form 'alias-name' -> URL associations, enumerated here
# * mass-aliasing of an Indy repository manager, which retrieves all Indy
#     repos and groups, and creates aliases for each one.

# Auto-alias all repositories on an Indy Maven Repository Manager using this:
#indy.url=http://my.indy.server:8080/api

# Provide an explicit alias from some arbitrary name to a URL, using the 'alias.'
# prefix (which is stripped off in the alias database, leaving 'my-alias' in the
# example below).
# alias.my-alias=http://repo.myco.com/maven/repo/path

[ui]

# UI files are stored here, for easy access to allow customization.
#ui.dir=${carto.home}/var/lib/cartographer/ui

[swagger]

# Enabled
#enabled=true

# Resource packages for Swagger to scan
#resource.package=org.commonjava.cartographer.rest

# Base path
#base.path=/

# API version
version=0.12.1-SNAPSHOT

# License
#license=ASLv2

# License Url
#license.url=http://www.apache.org/licenses/LICENSE-2.0

# [threadpools]
#
# This configures the Weft threadpool-injector. It is used to initialize 
# threadpools with custom names, sizes, and thread priorities, and inject
# them via the CDI annotation: @ExecutorConfig
# (class name is: org.commonjava.cdi.util.weft.ExecutorConfig)
#
# defaultThreads=NN # Default for this is calculated by: Runtime.getRuntime().availableProcessors() * 2
# defaultPriority=8
# For a custom threadpool called 'mypool' you might configure it using:
# mypool.threads=NN
# mypool.priority=N


